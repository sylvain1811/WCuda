#include <iostream>

#include "AlgoA.h"
#include "AlgoB.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void useAlgo(void);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void useAlgo(void)
    {
    cout << "\nHeritage" << endl;

    // Algo A
	{
	Algo* ptrAlgo = new AlgoA(); // Warning : we must use a pointer because Algo_A is abstract

	cout << "AlgoA(0) = " << ptrAlgo->z(0) << endl; // 2

	delete ptrAlgo;
	}

    // Algo B
	{
	Algo* ptrAlgo = new AlgoB(); // Warning : we must use a pointer because Algo_A is abstract

	cout << "AlgoB(0) = " << ptrAlgo->z(0) << endl; // -2

	delete ptrAlgo;
	}
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

